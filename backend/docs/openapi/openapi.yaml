openapi: 3.0.3
info:
  title: MeshMemory API
  description: |
    # MeshMemory API Documentation
    
    This is the official API documentation for MeshMemory, a powerful chat and knowledge management platform.
    
    ## Authentication
    
    All API endpoints require authentication using JWT tokens. Include the token in the `Authorization` header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```
    
    ## Base URL
    
    ```
    https://api.meshmemory.xyz.app/v1
    ```
    
    ## Rate Limiting
    
    - 1000 requests per hour per user
    - 100 requests per minute per endpoint
  version: 1.0.0
  contact:
    name: API Support
    email: support@meshmemory.xyz.app
  license:
    name: Proprietary
    url: https://meshmemory.xyz.app/terms

servers:
  - url: https://api.meshmemory.xyz.app/v1
    description: Production server
  - url: http://localhost:8000/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
          description: Error message
    
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique message ID
        content:
          type: string
          description: Message content
        role:
          type: string
          enum: [user, assistant, system]
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
    
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_hybrid:
          type: boolean
          description: Whether this is a hybrid chat (merged from multiple sources)

    HybridChatCreate:
      type: object
      required:
        - title
        - source_ids
      properties:
        title:
          type: string
          description: Title for the new hybrid chat
        source_ids:
          type: array
          items:
            type: string
            format: uuid
          minItems: 2
          description: List of source conversation IDs to merge (minimum 2)

    ImportSource:
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          enum: [copy_paste, html, pdf, screenshot, link]
          description: Type of content being imported
        title:
          type: string
          description: Title for the imported content
        text:
          type: string
          description: Text content (for copy_paste type)
        html:
          type: string
          description: HTML content (for html type)
        url:
          type: string
          format: uri
          description: URL to import from (for link type)

  parameters:
    conversationId:
      name: conversation_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: ID of the conversation
    
    messageId:
      name: message_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: ID of the message

  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ValidationError:
      description: Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []

paths:
  /conversations:
    get:
      tags: [Conversations]
      summary: List conversations
      description: Get a paginated list of conversations
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  total:
                    type: integer
                  page:
                    type: integer
                  page_size:
                    type: integer
    
    post:
      tags: [Conversations]
      summary: Create a new conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Conversation title
                initial_message:
                  type: string
                  description: Optional initial message content
      responses:
        '201':
          description: Created conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'

  /conversations/{conversation_id}:
    get:
      tags: [Conversations]
      summary: Get conversation details
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
    
    delete:
      tags: [Conversations]
      summary: Delete a conversation
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        '204':
          description: Conversation deleted successfully
    
    patch:
      tags: [Conversations]
      summary: Update conversation
      parameters:
        - $ref: '#/components/parameters/conversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: New conversation title
      responses:
        '200':
          description: Updated conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'

  /conversations/{conversation_id}/messages:
    get:
      tags: [Messages]
      summary: Get conversation messages
      parameters:
        - $ref: '#/components/parameters/conversationId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  total:
                    type: integer
                  page:
                    type: integer
                  page_size:
                    type: integer
    
    post:
      tags: [Messages]
      summary: Send a message
      parameters:
        - $ref: '#/components/parameters/conversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                role:
                  type: string
                  enum: [user, assistant, system]
                  default: user
      responses:
        '201':
          description: Created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /import:
    post:
      tags: [Import]
      summary: Import content
      description: |
        Import content from various sources into a new conversation.
        
        Supported import types:
        - `copy_paste`: Plain text content
        - `html`: HTML content
        - `pdf`: PDF document
        - `screenshot`: Image with OCR
        - `link`: Web page URL
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [type, title]
              properties:
                type:
                  type: string
                  enum: [copy_paste, html, pdf, screenshot, link]
                title:
                  type: string
                text:
                  type: string
                  description: Required for type=copy_paste
                html:
                  type: string
                  description: Required for type=html
                url:
                  type: string
                  format: uri
                  description: Required for type=link
                file:
                  type: string
                  format: binary
                  description: Required for type=pdf or type=screenshot
      responses:
        '201':
          description: Content imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  source_id:
                    type: string
                    format: uuid
                  chunks_processed:
                    type: integer
                  conversation_id:
                    type: string
                    format: uuid
                  title:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /merge:
    post:
      tags: [Merge]
      summary: Merge conversations
      description: Merge multiple conversations into a new hybrid chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HybridChatCreate'
      responses:
        '201':
          description: Conversations merged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  hybrid_chat_id:
                    type: string
                    format: uuid
                  source_ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                  title:
                    type: string
                  created_at:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
